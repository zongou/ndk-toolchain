#!/bin/sh

set -u

RED='\033[91m'
DEF='\033[0m'

# print('Node.js android configure: Found Python {}.{}.{}...'.format(*sys.version_info))
# acceptable_pythons = ((3, 11), (3, 10), (3, 9), (3, 8), (3, 7), (3, 6))

# In order to cross-compile node for Android using NDK, run:
#   source android-configure <path_to_ndk> [arch]
#
# By running android-configure with source, will allow environment variables to
# be persistent in current session. This is useful for installing native node
# modules with npm. Also, don't forget to set the arch in npm config using
# 'npm config set arch=<arch>'

_msg() {
    # shellcheck disable=SC2059
    printf "$*" >&2
}

msg() {
    _msg "$*\n"
}

exit_error_msg() {
    msg "${RED}Error: ${DEF}$1"
    exit 1
}

validate_gcc_version() {
    if command -v gcc >/dev/null 2>&1; then
        host_gcc_version=$($(command -v gcc) --version | grep gcc | awk '{print $NF}')
        major=$(echo "${host_gcc_version}" | awk -F . '{print $1}')
        minor=$(echo "${host_gcc_version}" | awk -F . '{print $2}')
        if test -z "${major}" || test -z "${minor}" || test "${major}" -lt 6 || test "${major}" -eq 6 && test "${minor}" -lt 3; then
            exit_error_msg "host gcc ${host_gcc_version} is too old, need gcc 6.3.0"
        fi
    else
        exit_error_msg "gcc not found"
    fi
}

main() {
    if test $# -ne 3; then
        exit_error_msg "Usage: ./$(basename "$0") [patch] <path to the Android NDK> <Android SDK version> <target architecture>"
    fi

    ANDROID_NDK_HOME="$1"
    ANDROID_SDK_VERSION="$2"
    TARGET_ARCH="$3"

    if ! test -d "${ANDROID_NDK_HOME}"; then
        exit_error_msg "Invalid path to the Android NDK"
    fi

    if test "${ANDROID_SDK_VERSION}" -lt 23; then
        exit_error_msg "Android SDK version must be at least 24 (Android 7.0)"
    fi

    case ${TARGET_ARCH} in
    arm)
        DEST_CPU="arm"
        TOOLCHAIN_PREFIX="armv7a-linux-androideabi"
        HOST_M32=" -m32"
        ;;
    x86)
        DEST_CPU="ia32"
        TOOLCHAIN_PREFIX="i686-linux-android"
        HOST_M32=" -m32"
        ;;
    x86_64)
        DEST_CPU="x64"
        TOOLCHAIN_PREFIX="x86_64-linux-android"
        TARGET_ARCH="x64"
        HOST_M32=""
        ;;
    arm64 | aarch64)
        DEST_CPU="arm64"
        TOOLCHAIN_PREFIX="aarch64-linux-android"
        TARGET_ARCH="arm64"
        HOST_M32=""
        ;;
    *)
        exit_error_msg "Invalid target architecture, must be one of: arm, arm64, aarch64, x86, x86_64"
        ;;
    esac

    validate_gcc_version

    msg "\033[92mInfo: \033[0mConfiguring for ${DEST_CPU} ..."

    HOST_OS="linux"
    HOST_ARCH="x86_64"
    TOOLCHAIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/${HOST_OS}-${HOST_ARCH}

    CC_host="$(command -v gcc)${HOST_M32}"
    CXX_host="$(command -v g++)${HOST_M32}"
    export CC_host CXX_host

    export PATH="${TOOLCHAIN}/bin:${PATH}"
    # clang --target=aarch64-linux-android24
    export CC="${TOOLCHAIN}/bin/${TOOLCHAIN_PREFIX}${ANDROID_SDK_VERSION}-clang"
    export CXX="${TOOLCHAIN}/bin/${TOOLCHAIN_PREFIX}${ANDROID_SDK_VERSION}-clang++"

    export AR="${TOOLCHAIN}/bin/llvm-ar"
    # export AS="${TOOLCHAIN}/bin/${TOOLCHAIN_PREFIX}${ANDROID_SDK_VERSION}-clang"
    export LD="${TOOLCHAIN}/bin/llvm-ld"
	# export RANLIB="${TOOLCHAIN}/bin/llvm-ranlib"
    export STRIP="${TOOLCHAIN}/bin/llvm-strip"
    export OBJCOPY="${TOOLCHAIN}/bin/llvm-objcopy"
    export OBJDUMP="${TOOLCHAIN}/bin/llvm-objdump"

    export CFLAGS=" -I${ANDROID_NDK_HOME}/sources/android/cpufeatures"

    export GYP_DEFINES="\
    target_arch=${TARGET_ARCH} \
    v8_target_arch=${TARGET_ARCH} \
    android_target_arch=${TARGET_ARCH} \
    host_os=${HOST_OS} \
    OS=android"

	# sub arch pre5, api 16, FILE_OFFSET_BITS="NO"
	# not configured to supporte pre5 yet
    if test ${ANDROID_SDK_VERSION} -gt 16; then
		export FILE_OFFSET_BITS="OK"
    else
		export FILE_OFFSET_BITS="NO"
    fi

    # configure --host
    export HOST=${TOOLCHAIN_PREFIX}${ANDROID_SDK_VERSION}
}

main "$@"
